# -*- coding: utf-8 -*-
"""pure_python_stats.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMpXN59UBDODPw9FK-iT8HsTND94PUFu
"""

import csv
from google.colab import drive
import math
from collections import Counter, defaultdict
import os

drive.mount('/content/drive')

fb_posts = '/content/drive/My Drive/Presidential Election Data/2024_fb_posts_president_scored_anon.csv'
fb_ads = '/content/drive/My Drive/Presidential Election Data/2024_fb_ads_president_scored_anon.csv'
tw_posts = '/content/drive/My Drive/Presidential Election Data/2024_tw_posts_president_scored_anon.csv'

import csv
import math
from collections import Counter

def analyze_csv(filepath):
    with open(filepath, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)
        columns = {col: [] for col in header}
        for row in reader:
            for col, value in zip(header, row):
                columns[col].append(value)

    filename = os.path.basename(filepath)
    print(f'----- Analysis for {filename} -----\n')
    all_numeric = []
    for col, values in columns.items():
        def is_number(s):
            try:
                float(s)
                return True
            except ValueError:
                return False

        numeric_values = [float(v) for v in values if is_number(v)]
        print(f'Column: {col}')
        print(f'  Count: {len(values)}')
        if numeric_values:
            mean = sum(numeric_values) / len(numeric_values)
            min_val = min(numeric_values)
            max_val = max(numeric_values)
            stddev = math.sqrt(sum((x - mean) ** 2 for x in numeric_values) / len(numeric_values))
            print(f'  Mean: {mean}')
            print(f'  Min: {min_val}')
            print(f'  Max: {max_val}')
            print(f'  Stddev: {stddev}')
            all_numeric.extend(numeric_values)
        else:
            counter = Counter(values)
            print(f'  Unique values: {len(counter)}')
            most_common = counter.most_common(1)
            if most_common:
                print(f'  Most frequent: {most_common[0][0]} (appears {most_common[0][1]} times)')
        print()

    if all_numeric:
        overall_count = len(all_numeric)
        overall_mean = sum(all_numeric) / overall_count
        overall_min = min(all_numeric)
        overall_max = max(all_numeric)
        overall_stddev = math.sqrt(sum((x - overall_mean) ** 2 for x in all_numeric) / overall_count)
        print('Overall Dataset Analysis:')
        print(f'  Count: {overall_count}')
        print(f'  Mean: {overall_mean}')
        print(f'  Min: {overall_min}')
        print(f'  Max: {overall_max}')
        print(f'  Stddev: {overall_stddev}')
    print('-' * 80, '\n')

analyze_csv(fb_posts)
analyze_csv(fb_ads)
analyze_csv(tw_posts)

"""## After Grouping"""

def analyze_grouped_ads(filepath, group_cols):
    with open(filepath, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        groups = defaultdict(list)
        for row in reader:
            # Create group key using selected grouping columns
            key = tuple(row[col].strip() for col in group_cols)
            groups[key].append(row)

    filename = os.path.basename(filepath)
    print(f'\n--- Aggregated Analysis by {group_cols} for {filename} ---')

    for i, (group_key, rows) in enumerate(groups.items()):
        if i >= 3:
            break  # Limit output to first 3 groups only

        print(f'\nGroup: {group_key}')
        columns = defaultdict(list)

        # Accumulate all values for each column in the group
        for row in rows:
            for col, val in row.items():
                columns[col].append(val)

        for col, values in columns.items():
            cleaned_values = [v.strip() for v in values if v.strip() != '']
            numeric_vals = [float(v) for v in cleaned_values if is_number(v)]

            print(f'  Column: {col}')
            print(f'    Count: {len(cleaned_values)}')

            if numeric_vals:
                mean = sum(numeric_vals) / len(numeric_vals)
                min_val = min(numeric_vals)
                max_val = max(numeric_vals)
                stddev = (
                    math.sqrt(sum((x - mean) ** 2 for x in numeric_vals) / (len(numeric_vals) - 1))
                    if len(numeric_vals) > 1 else 0.0
                )
                print(f'    Mean: {mean}')
                print(f'    Min: {min_val}')
                print(f'    Max: {max_val}')
                print(f'    Stddev: {stddev}')
            else:
                counter = Counter(cleaned_values)
                print(f'    Unique values: {len(counter)}')
                if counter:
                    most_common = counter.most_common(1)[0]
                    print(f'    Most frequent: {most_common[0]} (appears {most_common[1]} times)')
        print('-' * 50)

analyze_grouped_ads(fb_ads, ['page_id'])
analyze_grouped_ads(fb_ads, ['page_id', 'ad_id'])

